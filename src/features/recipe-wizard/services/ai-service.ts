/**
 * @fileoverview AI Service for Recipe Wizard - Frontend API Client
 * Handles API calls to the Recipe Wizard backend for AI-powered analysis
 */

import type { 
  PotentialCause, 
  DemographicsData 
} from '../types/recipe-wizard.types';

/**
 * Request interface for AI service calls
 */
interface AIServiceRequest {
  healthConcern: string;
  demographics: DemographicsData;
}

/**
 * AI Service Error class for better error handling
 */
export class AIServiceError extends Error {
  constructor(
    message: string,
    public code: string,
    public originalError?: Error
  ) {
    super(message);
    this.name = 'AIServiceError';
  }
}

/**
 * Fetch potential causes from AI service via API
 * Main entry point for AI-powered analysis
 */
export async function fetchPotentialCauses(request: AIServiceRequest): Promise<PotentialCause[]> {
  try {
    // Validate input
    if (!request.healthConcern?.trim()) {
      throw new AIServiceError(
        'Health concern is required',
        'MISSING_HEALTH_CONCERN'
      );
    }

    if (!request.demographics) {
      throw new AIServiceError(
        'Demographics information is required',
        'MISSING_DEMOGRAPHICS'
      );
    }

    // Make API call to the Recipe Wizard backend
    const response = await fetch('/api/recipe-wizard', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        healthConcern: { healthConcern: request.healthConcern },
        demographics: request.demographics
      })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new AIServiceError(
        errorData.error || `API request failed with status ${response.status}`,
        'API_REQUEST_FAILED'
      );
    }

    const data = await response.json();

    if (!data.success) {
      throw new AIServiceError(
        data.error || 'API returned unsuccessful response',
        'API_ERROR'
      );
    }

    if (!data.data || !Array.isArray(data.data)) {
      throw new AIServiceError(
        'Invalid response format from API',
        'INVALID_RESPONSE_FORMAT'
      );
    }

    if (data.data.length === 0) {
      throw new AIServiceError(
        'No potential causes generated by AI service',
        'EMPTY_RESPONSE'
      );
    }

    return data.data;

  } catch (error) {
    // Re-throw AIServiceError as-is
    if (error instanceof AIServiceError) {
      throw error;
    }

    // Handle network errors
    if (error instanceof TypeError && error.message.includes('fetch')) {
      throw new AIServiceError(
        'Network error: Unable to connect to AI service',
        'NETWORK_ERROR',
        error as Error
      );
    }

    // Wrap other errors
    throw new AIServiceError(
      'Failed to fetch potential causes from AI service',
      'AI_SERVICE_ERROR',
      error as Error
    );
  }
}

/**
 * Health check for AI service availability
 */
export async function checkAIServiceHealth(): Promise<boolean> {
  try {
    const response = await fetch('/api/recipe-wizard', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });

    if (!response.ok) {
      return false;
    }

    const data = await response.json();
    return data.status === 'healthy' && data.configured === true;
  } catch (error) {
    console.error('AI Service health check failed:', error);
    return false;
  }
}

/**
 * Get AI service configuration and status
 */
export function getAIServiceInfo() {
  return {
    provider: 'OpenAI Agents JS SDK',
    version: '0.0.4',
    model: 'gpt-4o-mini',
    features: ['potential-causes-analysis'],
    status: 'active',
    endpoint: '/api/recipe-wizard'
  };
}
